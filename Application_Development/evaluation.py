# -*- coding: utf-8 -*-
"""Evaluation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11y3DO8KNpqyvl4PNAeMA7aGxcjCbOJEP
"""

from google.colab import drive
drive.mount('/content/drive/', force_remount=True)

import os
import pandas as pd
import openai
import warnings
warnings.filterwarnings('ignore')

!pip install langchain-community langchain-core --quiet

openai_api_key = "..."

# account for deprecation of LLM model
import datetime
# Get the current date
current_date = datetime.datetime.now().date()

# Define the date after which the model should be set to "gpt-3.5-turbo"
target_date = datetime.date(2024, 6, 12)

# Set the model variable based on the current date
if current_date > target_date:
    llm_model = "gpt-3.5-turbo"
else:
    llm_model = "gpt-3.5-turbo-0301"

""" # Create our QandA application"""

from langchain.chains import RetrievalQA
from langchain.chat_models import ChatOpenAI
from langchain.document_loaders import CSVLoader
from langchain.indexes import VectorstoreIndexCreator
from langchain.vectorstores import DocArrayInMemorySearch
from langchain.embeddings import OpenAIEmbeddings

file = '/content/drive/MyDrive/Project_Experiments/DeepLearning_LangChain/QnA_data/OutdoorClothingCatalog_1000.csv'

# Initialize CSVLoader with the verified file path
loader = CSVLoader(file_path = file)
data = loader.load()

# Step 2: Embed the documents using OpenAI Embeddings
embedding_model = OpenAIEmbeddings(openai_api_key = openai_api_key)

!pip install docarray --quiet

!pip install tiktoken  --quiet

index = VectorstoreIndexCreator(
    vectorstore_cls = DocArrayInMemorySearch,
    embedding = embedding_model
).from_loaders([loader])

llm = ChatOpenAI(temperature = 0.0, model=llm_model,openai_api_key = openai_api_key)

qa = RetrievalQA.from_chain_type(
    llm = llm,
    chain_type = "stuff",
    retriever = index.vectorstore.as_retriever(),
    verbose=True,
    chain_type_kwargs = {
        "document_separator": "<<<<>>>>>"
    }
)

"""# Coming up with test datapoints"""

data[10]

data[11]

"""# Hard- Coded examples --> here we maanually evaluate it"""

examples = [
    {
        "query": "Do the Cozy Comfort Pullover Set\
        have side pockets?",
        "answer": "Yes"
    },
    {
        "query": "What collection is the Ultra-Lofty \
        850 Stretch Down Hooded Jacket from?",
        "answer": "The DownTek collection"
    }
]

"""# LLM-Generated examples"""

from langchain.evaluation.qa import QAGenerateChain # automate with language modl themselves. # take doc and will create a question and answer pair from each documets.

example_gen_chain = QAGenerateChain.from_llm(ChatOpenAI(model=llm_model,openai_api_key = openai_api_key))
example_gen_chain

new_examples = example_gen_chain.apply_and_parse(
    [{"doc": t} for t in data[:5]]
) # apply and parse method and we want to return a dictionary

new_examples = [i['qa_pairs'] for i in new_examples]

print(len(new_examples))

new_examples[2]

"""# Combine Examples"""

examples += new_examples

print(len(examples))

qa.run(examples[2]["query"])

"""# Manual Evaluation"""

import langchain
langchain.debug = True

qa.run(examples[5]["query"])

# Turn off the debug mode
langchain.debug = False

"""# LLM assisted evaluation"""

predictions = qa.apply(examples)

from langchain.evaluation.qa import QAEvalChain

llm = ChatOpenAI(temperature=0, model=llm_model, openai_api_key = openai_api_key)
eval_chain = QAEvalChain.from_llm(llm)

graded_outputs = eval_chain.evaluate(examples, predictions)

for i, eg in enumerate(examples):
    print(f"Example {i}:")
    print("Question: " + predictions[i]['query'])
    print("Real Answer: " + predictions[i]['answer'])
    print("Predicted Answer: " + predictions[i]['result'])
    print("Predicted Grade: " + graded_outputs[i]['text'][0])
    print()

for i, eg in enumerate(examples):
    print(f"Example {i}:")
    print("Question: "         + predictions[i]['query'])
    print("Real Answer: "      + predictions[i]['answer'])
    print("Predicted Answer: " + predictions[i]['result'])
    # results[0] is the grade string, not a dict
    print("Predicted Grade: "  + graded_outputs[i]['text'])
    print()

graded_outputs[0]