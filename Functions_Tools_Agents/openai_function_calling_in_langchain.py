# -*- coding: utf-8 -*-
"""OpenAI Function Calling In LangChain.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iGJYiXxA5eszThLilVqp45_1M1-mUgQX
"""

from google.colab import drive
drive.mount('/content/drive/', force_remount=True)

openai_api_key =

import os
import openai

from typing import List
from pydantic import BaseModel, Field

"""# Pydantic Syntax

- Pydantic data classes are a blend of Python's data classes with the validation power of Pydantic.

- They offer a concise way to define data structures while ensuring that the data adheres to specified types and constraints.

- In standard python you would create a class like this:

"""

class User:
    def __init__(self, name: str, age: int, email: str):
        self.name = name
        self.age = age
        self.email = email

foo = User(name="tannaz",age=37, email="t@gmail.com")

foo.name

foo.age

foo.email

foo = User(name="tannaz",age="bar", email="t@gmail.com")

foo.age

"""- In pydantics is look like this:"""

class pUser(BaseModel):
    name: str
    age: int
    email: str

foo_p = pUser(name="Jane", age=32, email="jane@gmail.com")

foo_p.name

foo_p = pUser(name="Jane", age={32}, email="jane@gmail.com")  # here the pydantic lib gave use validation error

class Class(BaseModel):  # another things that we can do with pydantic, is nest these data structures.
    students: List[pUser]

obj = Class(
    students=[pUser(name="Jane", age=32, email="jane@gmail.com")]
)

obj

"""##  How to use Pydantic to create OpenAI function"""

class WeatherSearch(BaseModel):
    """Call this with an airport code to get the weather at that airport""" #doc string
    airport_code: str = Field(description="airport code to get weather for")

from langchain.utils.openai_functions import convert_pydantic_to_openai_function  # convert pydantic pbject to json schemas

weather_function = convert_pydantic_to_openai_function(WeatherSearch) # pass the name of class not initialize the object

weather_function

class WeatherSearch1(BaseModel):

    airport_code: str = Field(description="airport code to get weather for")

"""- the doc string above act as a prompt and it's a required
- if we remove it from the fuction we get an error
"""

convert_pydantic_to_openai_function(WeatherSearch1)

WeatherSearch1()  # initiate the weatherserarch1 to see that des is required

class WeatherSearch2(BaseModel):
    """Call this with an airport code to get the weather at that airport"""
    airport_code: str  # here we remove the requ

convert_pydantic_to_openai_function(WeatherSearch2) # des is optional not mandatory in LangChain

!pip install langchain langchain-community langchain-openai --quiet

from langchain.chat_models import ChatOpenAI

model = ChatOpenAI(openai_api_key=openai_api_key)

model.invoke("what is the weather in SF today?", functions=[weather_function])

model_with_function = model.bind(functions=[weather_function])

model_with_function.invoke("what is the weather in sf?")

"""## Forcing it to use a function

- We can force the model to use a function (bind the function to the model)
"""

model_with_forced_function = model.bind(functions=[weather_function], function_call={"name":"WeatherSearch"})

model_with_forced_function.invoke("what is the weather in sf?")

model_with_forced_function.invoke("hi!")

"""## Using in a chain

- We can use this model bound to function in a chain as we normally would

"""

from langchain.prompts import ChatPromptTemplate

prompt = ChatPromptTemplate.from_messages([
    ("system", "You are a helpful assistant"),
    ("user", "{input}")
])

chain = prompt | model_with_function

chain.invoke({"input": "what is the weather in sf?"})

"""# Using multiple functions

- Even better, we can pass a set of function and let the LLM decide which to use based on the question context.

"""

class ArtistSearch(BaseModel):
    """Call this to get the names of songs by a particular artist"""
    artist_name: str = Field(description="name of artist to look up")
    n: int = Field(description="number of results")

functions = [
    convert_pydantic_to_openai_function(WeatherSearch),
    convert_pydantic_to_openai_function(ArtistSearch),
]

model_with_functions = model.bind(functions=functions)

model_with_functions.invoke("what is the weather in sf?")

model_with_functions.invoke("what are three songs by taylor swift?")

model_with_functions.invoke("hi!")