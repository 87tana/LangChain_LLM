# -*- coding: utf-8 -*-
"""Agents.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kQtfRWN62oqmWp53JFt2eAfH9iSqlatC

LangChain: Agents
Outline:

  -  Using built in LangChain tools: DuckDuckGo search and Wikipedia
  - Defining your own tools
"""

from google.colab import drive
drive.mount('/content/drive/', force_remount=True)

import os
import openai
import warnings
warnings.filterwarnings('ignore')

openai_api_key = "..."

!pip install --upgrade pip  --quiet
!pip install langchain-community langchain-core --quiet
!pip install langchain openai ipython --quiet
!pip install langchain langchain_experimental openai ipython --quiet
!pip install -U wikipedia --quiet

# account for deprecation of LLM model
import datetime
# Get the current date
current_date = datetime.datetime.now().date()

# Define the date after which the model should be set to "gpt-3.5-turbo"
target_date = datetime.date(2024, 6, 12)

# Set the model variable based on the current date
if current_date > target_date:
    llm_model = "gpt-3.5-turbo"
else:
    llm_model = "gpt-3.5-turbo-0301"

"""# Built-in LangChain tools"""

from langchain_experimental.agents.agent_toolkits import create_python_agent
from langchain.agents import load_tools, initialize_agent
from langchain.agents import AgentType
from langchain_experimental.tools.python.tool import PythonREPLTool
from langchain_experimental.utilities import PythonREPL
from langchain.chat_models import ChatOpenAI

llm = ChatOpenAI(temperature=0, model=llm_model,openai_api_key = openai_api_key) # we are using the language model as reasoning agent

"""# load two tools"""

tools = load_tools(["llm-math","wikipedia"], llm=llm)

"""# next we are initialize an agent"""

agent= initialize_agent(
    tools,
    llm,
    agent = AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION,
    handle_parsing_errors =True,
    verbose = True)

 # REACT --> this is prompting technique, to get the best reasoning performance out of language models.

agent("What is 999 in power of 2")

"""# Wikipedia example"""

question = "Tom M. Mitchell is an American computer scientist \
and the Founders University Professor at Carnegie Mellon University (CMU)\
what book did he write?"

result = agent(question)

"""# Python Agent"""

agent = create_python_agent(
    llm,
    tool=PythonREPLTool(),
    verbose=True
)
# pythonRepl --> interact wit the code--> like jupyter notebook

customer_list = [["Harrison", "Chase"],
                 ["Lang", "Chain"],
                 ["Dolly", "Too"],
                 ["Elle", "Elem"],
                 ["Geoff","Fusion"],
                 ["Trance","Former"],
                 ["Jen","Ayai"]
                ]

agent.run(f"""Sort these customers by \
last name and then first name \
and print the output: {customer_list}""")

"""#Define your own tool"""

import langchain
langchain.debug=True
agent.run(f"""Sort these customers by \
last name and then first name \
and print the output: {customer_list}""")
langchain.debug=False

!pip install DateTime --quiet

from langchain.agents import tool
from datetime import date

@tool
def time(text: str) -> str:
    """Returns todays date, use this for any \
    questions related to knowing todays date. \
    The input should always be an empty string, \
    and this function will always return todays \
    date - any date mathmatics should occur \
    outside this function."""
    return str(date.today())

agent= initialize_agent(
    tools + [time],
    llm,
    agent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION,
    handle_parsing_errors=True,
    verbose = True)

agent.run("what's the date today")

try:
    result = agent("whats the date today?")
except:
    print("exception on external access")